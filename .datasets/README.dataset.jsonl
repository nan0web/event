{"instruction":"How to install with npm?","output":"```bash\nnpm install @nan0web/event\n```","context":["h1:@nan0web/event","h2:Installation"],"input":"## Installation\n","tags":["@nan0web/event","Installation"],"proven":"assert-in-@nan0web/event"}
{"instruction":"How to install with pnpm?","output":"```bash\npnpm add @nan0web/event\n```","context":["h1:@nan0web/event","h2:Installation"],"input":"## Installation\n","tags":["@nan0web/event","Installation"],"proven":"assert-in-@nan0web/event"}
{"instruction":"How to install with yarn?","output":"```bash\nyarn add @nan0web/event\n```","context":["h1:@nan0web/event","h2:Installation"],"input":"## Installation\n","tags":["@nan0web/event","Installation"],"proven":"assert-in-@nan0web/event"}
{"instruction":"How to create basic event bus and listen for messages?","output":"```js\nimport event from \"@nan0web/event\"\nconst bus = event()\nlet messageReceived = false\n\nbus.on(\"message\", (ctx) => {\n\tmessageReceived = true\n\tconsole.info(`Received: ${ctx.data.text}`)\n})\n\nawait bus.emit(\"message\", { text: \"Hello world!\" })\n\n```","context":["h1:@nan0web/event","h2:Usage","h3:Basic Event Emitter"],"input":"### Basic Event Emitter\n\nCreate an event bus instance and listen to custom events.\n","tags":["@nan0web/event","Usage","Basic Event Emitter"],"proven":"assert-in-@nan0web/event"}
{"instruction":"How to prevent default event handling in listener?","output":"```js\nimport event from \"@nan0web/event\"\nconst bus = event()\nlet callCount = 0\n\nbus.on(\"stop\", (ctx) => {\n\tcallCount++\n\tctx.preventDefault()\n})\n\nbus.on(\"stop\", () => {\n\tcallCount++\n})\n\nconst result = await bus.emit(\"stop\", {})\n```","context":["h1:@nan0web/event","h2:Usage","h3:Prevent Default Behavior"],"input":"### Prevent Default Behavior\n\nCancel further propagation with `preventDefault`.\n","tags":["@nan0web/event","Usage","Prevent Default Behavior"],"proven":"assert-in-@nan0web/event"}
{"instruction":"How to use command with pipeline events?","output":"```js\nimport { createCommand } from \"@nan0web/event/command\"\n\nconst countCommand = createCommand(\"count\", async (ctx) => {\n\tctx.meta.totalCount = (ctx.meta.totalCount || 0) + 1\n\tconsole.info(`Progress ${ctx.data.iteration}: ${ctx.meta.totalCount} events processed`)\n})\n\ncountCommand.on(\"before\", () => {\n\tconsole.info(\"Counter started\")\n})\n\nfor (let i = 0; i < 2; i++) {\n\tawait countCommand.execute({ iteration: i })\n}\n\n```","context":["h1:@nan0web/event","h2:Usage","h3:Command Pipeline with Events"],"input":"### Command Pipeline with Events\n\nCommands support a full execution pipeline including `before`, `success`, and `error` stages.\n\nContext is not passing to the next executtion inside the loop.\n","tags":["@nan0web/event","Usage","Command Pipeline with Events"],"proven":"assert-in-@nan0web/event"}
{"instruction":"How to extend Event class for custom event bus?","output":"```js\nimport Event from \"@nan0web/event/oop\"\n\nclass TestEvent extends Event {\n\tasync ping() {\n\t\treturn await this.emit('ping', {})\n\t}\n}\n\nconst instance = new TestEvent()\nlet received = false\n\ninstance.on('ping', () => {\n\treceived = true\n})\n\nawait instance.ping()\n\n```","context":["h1:@nan0web/event","h2:Usage","h3:Custom Event Class (OOP Style)"],"input":"### Custom Event Class (OOP Style)\n\nExtend `Event` class to create your own custom event systems.\n","tags":["@nan0web/event","Usage","Custom Event Class (OOP Style)"],"proven":"assert-in-@nan0web/event"}
{"instruction":"How to manipulate and clone event contexts?","output":"```js\nimport { EventContext } from \"@nan0web/event\"\n\nconst ctx = EventContext.from({\n\ttype: \"message\",\n\tdata: { text: \"ping\" },\n\tmeta: { id: 1 }\n})\n\nconst clone = ctx.clone()\nclone.data.ping = true\nconsole.log(ctx.data) // { text: \"ping\" }\nconsole.info(clone.data) // { text: \"ping\", ping: true }\n\n```","context":["h1:@nan0web/event","h2:Usage","h3:Event Context Manipulation"],"input":"### Event Context Manipulation\n\n`EventContext`","tags":["@nan0web/event","Usage","Event Context Manipulation"],"proven":"assert-in-@nan0web/event"}
{"instruction":"How to run playground script?","output":"```bash\n# Clone the repository and run the CLI playground\ngit clone https://github.com/nan0web/event.git\ncd event\nnpm install\nnpm run playground\n```","context":["h1:@nan0web/event","h2:Playground"],"input":"## Playground\n","tags":["@nan0web/event","Playground"],"proven":"assert-in-@nan0web/event"}